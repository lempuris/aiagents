import os
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()

class FinancialReportingAgent:
    def __init__(self, name="FinancialAnalyst"):
        self.name = name
        self.client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # Mock Redshift connection (replace with actual psycopg2 connection)
        self.mock_data = {
            'revenue': [
                {'month': '2024-01', 'amount': 1250000, 'region': 'North America'},
                {'month': '2024-02', 'amount': 1180000, 'region': 'North America'},
                {'month': '2024-03', 'amount': 1320000, 'region': 'North America'},
                {'month': '2024-01', 'amount': 890000, 'region': 'Europe'},
                {'month': '2024-02', 'amount': 920000, 'region': 'Europe'},
                {'month': '2024-03', 'amount': 980000, 'region': 'Europe'},
            ],
            'expenses': [
                {'month': '2024-01', 'category': 'Operations', 'amount': 450000},
                {'month': '2024-02', 'category': 'Operations', 'amount': 420000},
                {'month': '2024-03', 'category': 'Operations', 'amount': 480000},
                {'month': '2024-01', 'category': 'Marketing', 'amount': 180000},
                {'month': '2024-02', 'category': 'Marketing', 'amount': 200000},
                {'month': '2024-03', 'category': 'Marketing', 'amount': 220000},
            ]
        }
    
    def query_redshift(self, query_type, filters=None):
        """Mock Redshift query - replace with actual database connection"""
        if query_type == 'revenue':
            data = self.mock_data['revenue']
            if filters and 'region' in filters:
                data = [r for r in data if r['region'] == filters['region']]
            return data
        
        elif query_type == 'expenses':
            data = self.mock_data['expenses']
            if filters and 'category' in filters:
                data = [e for e in data if e['category'] == filters['category']]
            return data
        
        elif query_type == 'profit_loss':
            revenue_data = self.query_redshift('revenue')
            expense_data = self.query_redshift('expenses')
            
            # Calculate monthly P&L
            monthly_revenue = {}
            monthly_expenses = {}
            
            for r in revenue_data:
                monthly_revenue[r['month']] = monthly_revenue.get(r['month'], 0) + r['amount']
            
            for e in expense_data:
                monthly_expenses[e['month']] = monthly_expenses.get(e['month'], 0) + e['amount']
            
            pl_data = []
            for month in monthly_revenue:
                profit = monthly_revenue[month] - monthly_expenses.get(month, 0)
                pl_data.append({
                    'month': month,
                    'revenue': monthly_revenue[month],
                    'expenses': monthly_expenses.get(month, 0),
                    'profit': profit
                })
            
            return pl_data
        
        return []
    
    def generate_financial_insights(self, data, report_type):
        """Use AI to generate insights from financial data"""
        data_summary = json.dumps(data, indent=2)
        
        prompt = f"""
        Analyze the following {report_type} data and provide key financial insights:
        
        {data_summary}
        
        Please provide:
        1. Key trends and patterns
        2. Performance highlights
        3. Areas of concern
        4. Actionable recommendations
        
        Keep the analysis concise and business-focused.
        """
        
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a senior financial analyst providing executive-level insights."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=400
        )
        
        return response.choices[0].message.content
    
    def generate_report(self, report_type, filters=None):
        """Generate comprehensive financial report"""
        print(f"\n{'='*60}")
        print(f"FINANCIAL REPORT: {report_type.upper()}")
        print(f"Generated by: {self.name}")
        print(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"{'='*60}")
        
        # Query data from Redshift
        data = self.query_redshift(report_type, filters)
        
        if not data:
            print("No data available for the specified criteria.")
            return
        
        # Display raw data
        print(f"\nðŸ“Š {report_type.upper()} DATA:")
        print("-" * 40)
        for item in data:
            if report_type == 'profit_loss':
                print(f"{item['month']}: Revenue ${item['revenue']:,} | "
                      f"Expenses ${item['expenses']:,} | "
                      f"Profit ${item['profit']:,}")
            elif report_type == 'revenue':
                print(f"{item['month']}: ${item['amount']:,} ({item['region']})")
            elif report_type == 'expenses':
                print(f"{item['month']}: ${item['amount']:,} ({item['category']})")
        
        # Generate AI insights
        print(f"\nðŸ¤– AI-POWERED INSIGHTS:")
        print("-" * 40)
        insights = self.generate_financial_insights(data, report_type)
        print(insights)
        
        return {
            'report_type': report_type,
            'data': data,
            'insights': insights,
            'generated_at': datetime.now().isoformat()
        }
    
    def create_dashboard_summary(self):
        """Create executive dashboard with multiple metrics"""
        print(f"\n{'='*60}")
        print("EXECUTIVE FINANCIAL DASHBOARD")
        print(f"{'='*60}")
        
        # Get all key metrics
        revenue_data = self.query_redshift('revenue')
        expense_data = self.query_redshift('expenses')
        pl_data = self.query_redshift('profit_loss')
        
        # Calculate KPIs
        total_revenue = sum(r['amount'] for r in revenue_data)
        total_expenses = sum(e['amount'] for e in expense_data)
        total_profit = total_revenue - total_expenses
        
        print(f"\nðŸ“ˆ KEY PERFORMANCE INDICATORS:")
        print(f"Total Revenue: ${total_revenue:,}")
        print(f"Total Expenses: ${total_expenses:,}")
        print(f"Net Profit: ${total_profit:,}")
        print(f"Profit Margin: {(total_profit/total_revenue)*100:.1f}%")
        
        # AI-powered executive summary
        summary_data = {
            'total_revenue': total_revenue,
            'total_expenses': total_expenses,
            'profit_margin': (total_profit/total_revenue)*100,
            'monthly_data': pl_data
        }
        
        executive_summary = self.generate_financial_insights(summary_data, "executive_summary")
        print(f"\nðŸŽ¯ EXECUTIVE SUMMARY:")
        print("-" * 40)
        print(executive_summary)

# Usage examples
if __name__ == "__main__":
    agent = FinancialReportingAgent()
    
    # Generate different types of reports
    print("1. Revenue Report by Region")
    agent.generate_report('revenue', {'region': 'North America'})
    
    print("\n" + "="*80)
    print("2. Profit & Loss Report")
    agent.generate_report('profit_loss')
    
    print("\n" + "="*80)
    print("3. Executive Dashboard")
    agent.create_dashboard_summary()